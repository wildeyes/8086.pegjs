module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { out: peg$parseout },
        peg$startRuleFunction  = peg$parseout,

        peg$c0 = function(asm) {
            return objCode.filter(function(n) { return n ? n : false; }).map(function(n) { return n.toString(16); }).join(' ');
        },
        peg$c1 = peg$FAILED,
        peg$c2 = [],
        peg$c3 = function(l) {return l},
        peg$c4 = function(first, rest) { return first.concat(rest); },
        peg$c5 = null,
        peg$c6 = function(label, op, comment) {
            if (label !== '') {
                symbolTable[label] = ilc; 
            } 
            if(op == null || op == undefined) {
                return [];
            }
            ilc += op.size;
            return op.opcodes;
        },
        peg$c7 = ":",
        peg$c8 = { type: "literal", value: ":", description: "\":\"" },
        peg$c9 = function(label) {return label;},
        peg$c10 = /^[a-zA-Z?@]/,
        peg$c11 = { type: "class", value: "[a-zA-Z?@]", description: "[a-zA-Z?@]" },
        peg$c12 = /^[a-zA-Z0-9]/,
        peg$c13 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
        peg$c14 = function(first, rest) {return first + rest.join('');},
        peg$c15 = function(op) {
            // console.log('Detecting operation...', op)
            var opData = opcodeTable[op.mnemonic]
             ? opcodeTable[op.mnemonic]
              : expected('Instruction Mnemonic, received Unknown;' + op.mnemonic),
                arrSize = opData.size, //[0] = minSize OR size, [1] = maxSize OR undefined
                size = arrSize[0],
                opcodes = [opData.code],
                ads = opData.ads

            for (var i = 0; i < ads.length; i++) {
                var ad = ads[i]

                if(ad === 'i0')
                    // if(op.rightOperand > 0xff)
                    //     opcodes.push()
                    // else
                    opcodes.push(op.rightOperand)
            };

            return {
                opcodes: opcodes,
                /* data: data,*/
                size: size
            };
        },
        peg$c16 = function(op) {
            return {
                name: op[0],
                params: op[2],
            };
        },
        peg$c17 = /^[mM]/,
        peg$c18 = { type: "class", value: "[mM]", description: "[mM]" },
        peg$c19 = /^[oO]/,
        peg$c20 = { type: "class", value: "[oO]", description: "[oO]" },
        peg$c21 = /^[vV]/,
        peg$c22 = { type: "class", value: "[vV]", description: "[vV]" },
        peg$c23 = /^[Aa]/,
        peg$c24 = { type: "class", value: "[Aa]", description: "[Aa]" },
        peg$c25 = /^[Hh]/,
        peg$c26 = { type: "class", value: "[Hh]", description: "[Hh]" },
        peg$c27 = /^[,]/,
        peg$c28 = { type: "class", value: "[,]", description: "[,]" },
        peg$c29 = function(a1) { return ['MOV AH,immediateByte','AH',a1]  },
        peg$c30 = /^[Ll]/,
        peg$c31 = { type: "class", value: "[Ll]", description: "[Ll]" },
        peg$c32 = function(a1) { return ['MOV AL,immediateByte','AL',a1]  },
        peg$c33 = function(a1) { return ['MOV AL,registerOrMemoryByte','AL',a1]  },
        peg$c34 = /^[Xx]/,
        peg$c35 = { type: "class", value: "[Xx]", description: "[Xx]" },
        peg$c36 = function(a1) { return ['MOV AX,immediateWord','AX',a1]  },
        peg$c37 = function(a1) { return ['MOV AX,registerOrMemoryWord','AX',a1]  },
        peg$c38 = /^[Bb]/,
        peg$c39 = { type: "class", value: "[Bb]", description: "[Bb]" },
        peg$c40 = function(a1) { return ['MOV BH,immediateByte','BH',a1]  },
        peg$c41 = function(a1) { return ['MOV BL,immediateByte','BL',a1]  },
        peg$c42 = /^[Pp]/,
        peg$c43 = { type: "class", value: "[Pp]", description: "[Pp]" },
        peg$c44 = function(a1) { return ['MOV BP,immediateWord','BP',a1]  },
        peg$c45 = function(a1) { return ['MOV BX,immediateWord','BX',a1]  },
        peg$c46 = /^[Cc]/,
        peg$c47 = { type: "class", value: "[Cc]", description: "[Cc]" },
        peg$c48 = function(a1) { return ['MOV CH,immediateByte','CH',a1]  },
        peg$c49 = function(a1) { return ['MOV CL,immediateByte','CL',a1]  },
        peg$c50 = function(a1) { return ['MOV CX,immediateWord','CX',a1]  },
        peg$c51 = /^[Dd]/,
        peg$c52 = { type: "class", value: "[Dd]", description: "[Dd]" },
        peg$c53 = function(a1) { return ['MOV DH,immediateByte','DH',a1]  },
        peg$c54 = /^[Ii]/,
        peg$c55 = { type: "class", value: "[Ii]", description: "[Ii]" },
        peg$c56 = function(a1) { return ['MOV DI,immediateWord','DI',a1]  },
        peg$c57 = function(a1) { return ['MOV DL,immediateByte','DL',a1]  },
        peg$c58 = function(a1) { return ['MOV DX,immediateWord','DX',a1]  },
        peg$c59 = /^[Ss]/,
        peg$c60 = { type: "class", value: "[Ss]", description: "[Ss]" },
        peg$c61 = function(a1) { return ['MOV SI,immediateWord','SI',a1]  },
        peg$c62 = function(a1) { return ['MOV SP,immediateWord','SP',a1]  },
        peg$c63 = function(a0, a1) { return ['MOV registerByte,registerOrMemoryByte',a0,a1]  },
        peg$c64 = function(a0, a1) { return ['MOV registerWord,registerOrMemoryWord',a0,a1]  },
        peg$c65 = function(a0, a1) { return ['MOV segmentRegister,registerOrMemoryWord',a0,a1]  },
        peg$c66 = function(a0, a1) { return ['MOV registerOrMemoryWord,AX',a0,a1]  },
        peg$c67 = function(a0, a1) { return ['MOV registerOrMemoryByte,AL',a0,a1]  },
        peg$c68 = function(a0, a1) { return ['MOV registerOrMemoryByte,immediateByte',a0,a1]  },
        peg$c69 = function(a0, a1) { return ['MOV registerOrMemoryByte,registerByte',a0,a1]  },
        peg$c70 = function(a0, a1) { return ['MOV registerOrMemoryWord,immediateWord',a0,a1]  },
        peg$c71 = function(a0, a1) { return ['MOV registerOrMemoryWord,registerWord',a0,a1]  },
        peg$c72 = function(a0, a1) { return ['MOV registerOrMemoryWord,segmentRegister',a0,a1]  },
        peg$c73 = /^[a-zA-Z0-9,]/,
        peg$c74 = { type: "class", value: "[a-zA-Z0-9,]", description: "[a-zA-Z0-9,]" },
        peg$c75 = function(unparsed) { expected('valid MOV instruction, Got;' + unparsed.join(''));},
        peg$c76 = function(ins, data) { return {name:ins.join('').toUpperCase(), mnemonic: data[0], leftOperand: data[1], rightOperand: data[2]}},
        peg$c77 = { type: "other", description: "comment" },
        peg$c78 = ";",
        peg$c79 = { type: "literal", value: ";", description: "\";\"" },
        peg$c80 = /^[^\n\r\n\u2028\u2029]/,
        peg$c81 = { type: "class", value: "[^\\n\\r\\n\\u2028\\u2029]", description: "[^\\n\\r\\n\\u2028\\u2029]" },
        peg$c82 = function(c) {return c.join('');},
        peg$c83 = { type: "other", description: "line end" },
        peg$c84 = "\n",
        peg$c85 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c86 = "\r\n",
        peg$c87 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c88 = "\r",
        peg$c89 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c90 = "\u2028",
        peg$c91 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c92 = "\u2029",
        peg$c93 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c94 = { type: "other", description: "whitespace" },
        peg$c95 = /^[ \t\x0B\f\xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/,
        peg$c96 = { type: "class", value: "[ \\t\\x0B\\f\\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]", description: "[ \\t\\x0B\\f\\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]" },
        peg$c97 = { type: "other", description: "Byte General Registers" },
        peg$c98 = /^[a-dA-D]/,
        peg$c99 = { type: "class", value: "[a-dA-D]", description: "[a-dA-D]" },
        peg$c100 = /^[hlHL]/,
        peg$c101 = { type: "class", value: "[hlHL]", description: "[hlHL]" },
        peg$c102 = function(reg) { return reg.join('').toUpperCase(); },
        peg$c103 = { type: "other", description: "Word General Registers" },
        peg$c104 = /^[sdbSDB]/,
        peg$c105 = { type: "class", value: "[sdbSDB]", description: "[sdbSDB]" },
        peg$c106 = /^[IPip]/,
        peg$c107 = { type: "class", value: "[IPip]", description: "[IPip]" },
        peg$c108 = /^[cdesCDES]/,
        peg$c109 = { type: "class", value: "[cdesCDES]", description: "[cdesCDES]" },
        peg$c110 = /^[SD]/,
        peg$c111 = { type: "class", value: "[SD]", description: "[SD]" },
        peg$c112 = /^[XPxp]/,
        peg$c113 = { type: "class", value: "[XPxp]", description: "[XPxp]" },
        peg$c114 = "[",
        peg$c115 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c116 = function(reg) {
                return reg === 'BP'
                 ? expected('BP Can\'t used as a single register in memory address (Write BP + 0)') 
                 : [reg]},
        peg$c117 = function(i) { return [i]},
        peg$c118 = function(equ) { 
                var usedType = {'BX,BP':false, 'SI,DI':false, 'immediateValue': false}
                if(equ.length < 2 || equ.length > 3)
                    expected('Only 2-3 stuff in memory address')
                for (var i = 0; i < equ.length; i++) {
                    if(equ[i].contains('BX') || equ[i].contains('BP'))
                        usedType['BX,BP'] ? expected('Can use BX,BP only once in memory address.') : usedType['BX,BP'] = true;
                    if(equ[i].contains('SI') || equ[i].contains('DI'))
                        usedType['SI,DI'] ? expected('Can use SI,DI only once in memory address.') : usedType['SI,DI'] = true;
                    if(parser.parse(equ[i],'numLiteral'))
                        usedType['immediateValue']
                         ? expected('Can use immediateValue only once in memory address.')
                          : usedType['immediateValue'] = true;
                }
                return equ;
            },
        peg$c119 = "]",
        peg$c120 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c121 = function(arrAddress) { return arrAddress },
        peg$c122 = function(first, rest) {return first.concat(rest);},
        peg$c123 = /^[+\-]/,
        peg$c124 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c125 = function(op, sign) { return sign ? [op,sign] : [op] },
        peg$c126 = function(n) {
            if (n > 0xFF) 
                expected('8-bit data expected.');
            else
                return n;
        },
        peg$c127 = function(n) {
            if (n > 0xFFFF) 
                expected('16-bit data expected.');
            else
                return n;
        },
        peg$c128 = { type: "other", description: "numeric literal" },
        peg$c129 = { type: "other", description: "decimal literal" },
        peg$c130 = /^[\-]/,
        peg$c131 = { type: "class", value: "[\\-]", description: "[\\-]" },
        peg$c132 = function(neg, digits) {
            return parseInt((!neg ? '' :'-') + digits.join(''), 10);
        },
        peg$c133 = { type: "other", description: "hex literal" },
        peg$c134 = "0x",
        peg$c135 = { type: "literal", value: "0x", description: "\"0x\"" },
        peg$c136 = function(hexits) {
            return parseInt(hexits.join(''), 16);
        },
        peg$c137 = "H",
        peg$c138 = { type: "literal", value: "H", description: "\"H\"" },
        peg$c139 = "h",
        peg$c140 = { type: "literal", value: "h", description: "\"h\"" },
        peg$c141 = { type: "other", description: "bin literal" },
        peg$c142 = { type: "other", description: "binary literal" },
        peg$c143 = "0b",
        peg$c144 = { type: "literal", value: "0b", description: "\"0b\"" },
        peg$c145 = function(bits) { return parseInt(bits.join(''), 2); },
        peg$c146 = "b",
        peg$c147 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c148 = { type: "other", description: "identifier" },
        peg$c149 = function(ltrs) { return ltrs.join(''); },
        peg$c150 = { type: "other", description: "letter/underscore" },
        peg$c151 = /^[a-zA-Z_]/,
        peg$c152 = { type: "class", value: "[a-zA-Z_]", description: "[a-zA-Z_]" },
        peg$c153 = { type: "other", description: "digit" },
        peg$c154 = /^[0-9]/,
        peg$c155 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c156 = { type: "other", description: "hex digit" },
        peg$c157 = /^[0-9a-fA-F]/,
        peg$c158 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c159 = { type: "other", description: "bit" },
        peg$c160 = /^[01]/,
        peg$c161 = { type: "class", value: "[01]", description: "[01]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseout() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseassemblyCode();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseassemblyCode() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseline();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseeol();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseline();
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c3(s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c1;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseeol();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseline();
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c3(s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c1;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c1;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c4(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsewhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsewhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parselabelPart();
        if (s2 === peg$FAILED) {
          s2 = peg$c5;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseoperation();
          if (s3 === peg$FAILED) {
            s3 = peg$c5;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsewhitespace();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsewhitespace();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsecomment();
              if (s5 === peg$FAILED) {
                s5 = peg$c5;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c6(s2, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parselabelPart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parselabel();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewhitespace();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhitespace();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c9(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c10.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c14(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseoperation() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseop_mov();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c15(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepairInstruction() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseop_mov();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c16(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseop_mov() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c17.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s3 !== peg$FAILED) {
          if (peg$c21.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c1;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewhitespace();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (peg$c23.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c25.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c26); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c27.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c28); }
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parsewhitespace();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parsewhitespace();
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseByte();
                  if (s8 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c29(s8);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c1;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (peg$c23.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s4 !== peg$FAILED) {
              if (peg$c30.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s5 !== peg$FAILED) {
                if (peg$c27.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsewhitespace();
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsewhitespace();
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseByte();
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s3;
                      s4 = peg$c32(s8);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c1;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (peg$c23.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
              if (s4 !== peg$FAILED) {
                if (peg$c30.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s5 !== peg$FAILED) {
                  if (peg$c27.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parsewhitespace();
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsewhitespace();
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseregisterOrMemoryByte();
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s3;
                        s4 = peg$c33(s8);
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c1;
              }
              if (s3 === peg$FAILED) {
                s3 = peg$currPos;
                if (peg$c23.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s4 !== peg$FAILED) {
                  if (peg$c34.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c35); }
                  }
                  if (s5 !== peg$FAILED) {
                    if (peg$c27.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c28); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parsewhitespace();
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parsewhitespace();
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseWord();
                        if (s8 !== peg$FAILED) {
                          peg$reportedPos = s3;
                          s4 = peg$c36(s8);
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c1;
                }
                if (s3 === peg$FAILED) {
                  s3 = peg$currPos;
                  if (peg$c23.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                  }
                  if (s4 !== peg$FAILED) {
                    if (peg$c34.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c35); }
                    }
                    if (s5 !== peg$FAILED) {
                      if (peg$c27.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = [];
                        s8 = peg$parsewhitespace();
                        while (s8 !== peg$FAILED) {
                          s7.push(s8);
                          s8 = peg$parsewhitespace();
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseregisterOrMemoryWord();
                          if (s8 !== peg$FAILED) {
                            peg$reportedPos = s3;
                            s4 = peg$c37(s8);
                            s3 = s4;
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c1;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c1;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    if (peg$c38.test(input.charAt(peg$currPos))) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c39); }
                    }
                    if (s4 !== peg$FAILED) {
                      if (peg$c25.test(input.charAt(peg$currPos))) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c26); }
                      }
                      if (s5 !== peg$FAILED) {
                        if (peg$c27.test(input.charAt(peg$currPos))) {
                          s6 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c28); }
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = [];
                          s8 = peg$parsewhitespace();
                          while (s8 !== peg$FAILED) {
                            s7.push(s8);
                            s8 = peg$parsewhitespace();
                          }
                          if (s7 !== peg$FAILED) {
                            s8 = peg$parseByte();
                            if (s8 !== peg$FAILED) {
                              peg$reportedPos = s3;
                              s4 = peg$c40(s8);
                              s3 = s4;
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c1;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c1;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$c1;
                    }
                    if (s3 === peg$FAILED) {
                      s3 = peg$currPos;
                      if (peg$c38.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c39); }
                      }
                      if (s4 !== peg$FAILED) {
                        if (peg$c30.test(input.charAt(peg$currPos))) {
                          s5 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c31); }
                        }
                        if (s5 !== peg$FAILED) {
                          if (peg$c27.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c28); }
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = [];
                            s8 = peg$parsewhitespace();
                            while (s8 !== peg$FAILED) {
                              s7.push(s8);
                              s8 = peg$parsewhitespace();
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = peg$parseByte();
                              if (s8 !== peg$FAILED) {
                                peg$reportedPos = s3;
                                s4 = peg$c41(s8);
                                s3 = s4;
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c1;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c1;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c1;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$c1;
                      }
                      if (s3 === peg$FAILED) {
                        s3 = peg$currPos;
                        if (peg$c38.test(input.charAt(peg$currPos))) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c39); }
                        }
                        if (s4 !== peg$FAILED) {
                          if (peg$c42.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                          }
                          if (s5 !== peg$FAILED) {
                            if (peg$c27.test(input.charAt(peg$currPos))) {
                              s6 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s6 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c28); }
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = [];
                              s8 = peg$parsewhitespace();
                              while (s8 !== peg$FAILED) {
                                s7.push(s8);
                                s8 = peg$parsewhitespace();
                              }
                              if (s7 !== peg$FAILED) {
                                s8 = peg$parseWord();
                                if (s8 !== peg$FAILED) {
                                  peg$reportedPos = s3;
                                  s4 = peg$c44(s8);
                                  s3 = s4;
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c1;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c1;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c1;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c1;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$c1;
                        }
                        if (s3 === peg$FAILED) {
                          s3 = peg$currPos;
                          if (peg$c38.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c39); }
                          }
                          if (s4 !== peg$FAILED) {
                            if (peg$c34.test(input.charAt(peg$currPos))) {
                              s5 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s5 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c35); }
                            }
                            if (s5 !== peg$FAILED) {
                              if (peg$c27.test(input.charAt(peg$currPos))) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c28); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = [];
                                s8 = peg$parsewhitespace();
                                while (s8 !== peg$FAILED) {
                                  s7.push(s8);
                                  s8 = peg$parsewhitespace();
                                }
                                if (s7 !== peg$FAILED) {
                                  s8 = peg$parseWord();
                                  if (s8 !== peg$FAILED) {
                                    peg$reportedPos = s3;
                                    s4 = peg$c45(s8);
                                    s3 = s4;
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c1;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c1;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c1;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c1;
                          }
                          if (s3 === peg$FAILED) {
                            s3 = peg$currPos;
                            if (peg$c46.test(input.charAt(peg$currPos))) {
                              s4 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c47); }
                            }
                            if (s4 !== peg$FAILED) {
                              if (peg$c25.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c26); }
                              }
                              if (s5 !== peg$FAILED) {
                                if (peg$c27.test(input.charAt(peg$currPos))) {
                                  s6 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = [];
                                  s8 = peg$parsewhitespace();
                                  while (s8 !== peg$FAILED) {
                                    s7.push(s8);
                                    s8 = peg$parsewhitespace();
                                  }
                                  if (s7 !== peg$FAILED) {
                                    s8 = peg$parseByte();
                                    if (s8 !== peg$FAILED) {
                                      peg$reportedPos = s3;
                                      s4 = peg$c48(s8);
                                      s3 = s4;
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c1;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c1;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c1;
                            }
                            if (s3 === peg$FAILED) {
                              s3 = peg$currPos;
                              if (peg$c46.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c47); }
                              }
                              if (s4 !== peg$FAILED) {
                                if (peg$c30.test(input.charAt(peg$currPos))) {
                                  s5 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s5 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                }
                                if (s5 !== peg$FAILED) {
                                  if (peg$c27.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                  }
                                  if (s6 !== peg$FAILED) {
                                    s7 = [];
                                    s8 = peg$parsewhitespace();
                                    while (s8 !== peg$FAILED) {
                                      s7.push(s8);
                                      s8 = peg$parsewhitespace();
                                    }
                                    if (s7 !== peg$FAILED) {
                                      s8 = peg$parseByte();
                                      if (s8 !== peg$FAILED) {
                                        peg$reportedPos = s3;
                                        s4 = peg$c49(s8);
                                        s3 = s4;
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c1;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c1;
                              }
                              if (s3 === peg$FAILED) {
                                s3 = peg$currPos;
                                if (peg$c46.test(input.charAt(peg$currPos))) {
                                  s4 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s4 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c47); }
                                }
                                if (s4 !== peg$FAILED) {
                                  if (peg$c34.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                  }
                                  if (s5 !== peg$FAILED) {
                                    if (peg$c27.test(input.charAt(peg$currPos))) {
                                      s6 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s6 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                    }
                                    if (s6 !== peg$FAILED) {
                                      s7 = [];
                                      s8 = peg$parsewhitespace();
                                      while (s8 !== peg$FAILED) {
                                        s7.push(s8);
                                        s8 = peg$parsewhitespace();
                                      }
                                      if (s7 !== peg$FAILED) {
                                        s8 = peg$parseWord();
                                        if (s8 !== peg$FAILED) {
                                          peg$reportedPos = s3;
                                          s4 = peg$c50(s8);
                                          s3 = s4;
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c1;
                                  }
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c1;
                                }
                                if (s3 === peg$FAILED) {
                                  s3 = peg$currPos;
                                  if (peg$c51.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                  }
                                  if (s4 !== peg$FAILED) {
                                    if (peg$c25.test(input.charAt(peg$currPos))) {
                                      s5 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s5 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c26); }
                                    }
                                    if (s5 !== peg$FAILED) {
                                      if (peg$c27.test(input.charAt(peg$currPos))) {
                                        s6 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                      }
                                      if (s6 !== peg$FAILED) {
                                        s7 = [];
                                        s8 = peg$parsewhitespace();
                                        while (s8 !== peg$FAILED) {
                                          s7.push(s8);
                                          s8 = peg$parsewhitespace();
                                        }
                                        if (s7 !== peg$FAILED) {
                                          s8 = peg$parseByte();
                                          if (s8 !== peg$FAILED) {
                                            peg$reportedPos = s3;
                                            s4 = peg$c53(s8);
                                            s3 = s4;
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c1;
                                    }
                                  } else {
                                    peg$currPos = s3;
                                    s3 = peg$c1;
                                  }
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$currPos;
                                    if (peg$c51.test(input.charAt(peg$currPos))) {
                                      s4 = input.charAt(peg$currPos);
                                      peg$currPos++;
                                    } else {
                                      s4 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                    }
                                    if (s4 !== peg$FAILED) {
                                      if (peg$c54.test(input.charAt(peg$currPos))) {
                                        s5 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s5 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                      }
                                      if (s5 !== peg$FAILED) {
                                        if (peg$c27.test(input.charAt(peg$currPos))) {
                                          s6 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s6 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                        }
                                        if (s6 !== peg$FAILED) {
                                          s7 = [];
                                          s8 = peg$parsewhitespace();
                                          while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            s8 = peg$parsewhitespace();
                                          }
                                          if (s7 !== peg$FAILED) {
                                            s8 = peg$parseWord();
                                            if (s8 !== peg$FAILED) {
                                              peg$reportedPos = s3;
                                              s4 = peg$c56(s8);
                                              s3 = s4;
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$c1;
                                      }
                                    } else {
                                      peg$currPos = s3;
                                      s3 = peg$c1;
                                    }
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$currPos;
                                      if (peg$c51.test(input.charAt(peg$currPos))) {
                                        s4 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                      } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                      }
                                      if (s4 !== peg$FAILED) {
                                        if (peg$c30.test(input.charAt(peg$currPos))) {
                                          s5 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s5 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                        }
                                        if (s5 !== peg$FAILED) {
                                          if (peg$c27.test(input.charAt(peg$currPos))) {
                                            s6 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                          }
                                          if (s6 !== peg$FAILED) {
                                            s7 = [];
                                            s8 = peg$parsewhitespace();
                                            while (s8 !== peg$FAILED) {
                                              s7.push(s8);
                                              s8 = peg$parsewhitespace();
                                            }
                                            if (s7 !== peg$FAILED) {
                                              s8 = peg$parseByte();
                                              if (s8 !== peg$FAILED) {
                                                peg$reportedPos = s3;
                                                s4 = peg$c57(s8);
                                                s3 = s4;
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$c1;
                                        }
                                      } else {
                                        peg$currPos = s3;
                                        s3 = peg$c1;
                                      }
                                      if (s3 === peg$FAILED) {
                                        s3 = peg$currPos;
                                        if (peg$c51.test(input.charAt(peg$currPos))) {
                                          s4 = input.charAt(peg$currPos);
                                          peg$currPos++;
                                        } else {
                                          s4 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                        }
                                        if (s4 !== peg$FAILED) {
                                          if (peg$c34.test(input.charAt(peg$currPos))) {
                                            s5 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s5 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                          }
                                          if (s5 !== peg$FAILED) {
                                            if (peg$c27.test(input.charAt(peg$currPos))) {
                                              s6 = input.charAt(peg$currPos);
                                              peg$currPos++;
                                            } else {
                                              s6 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                            }
                                            if (s6 !== peg$FAILED) {
                                              s7 = [];
                                              s8 = peg$parsewhitespace();
                                              while (s8 !== peg$FAILED) {
                                                s7.push(s8);
                                                s8 = peg$parsewhitespace();
                                              }
                                              if (s7 !== peg$FAILED) {
                                                s8 = peg$parseWord();
                                                if (s8 !== peg$FAILED) {
                                                  peg$reportedPos = s3;
                                                  s4 = peg$c58(s8);
                                                  s3 = s4;
                                                } else {
                                                  peg$currPos = s3;
                                                  s3 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c1;
                                          }
                                        } else {
                                          peg$currPos = s3;
                                          s3 = peg$c1;
                                        }
                                        if (s3 === peg$FAILED) {
                                          s3 = peg$currPos;
                                          if (peg$c59.test(input.charAt(peg$currPos))) {
                                            s4 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                          } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                          }
                                          if (s4 !== peg$FAILED) {
                                            if (peg$c54.test(input.charAt(peg$currPos))) {
                                              s5 = input.charAt(peg$currPos);
                                              peg$currPos++;
                                            } else {
                                              s5 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                            }
                                            if (s5 !== peg$FAILED) {
                                              if (peg$c27.test(input.charAt(peg$currPos))) {
                                                s6 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                              } else {
                                                s6 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                              }
                                              if (s6 !== peg$FAILED) {
                                                s7 = [];
                                                s8 = peg$parsewhitespace();
                                                while (s8 !== peg$FAILED) {
                                                  s7.push(s8);
                                                  s8 = peg$parsewhitespace();
                                                }
                                                if (s7 !== peg$FAILED) {
                                                  s8 = peg$parseWord();
                                                  if (s8 !== peg$FAILED) {
                                                    peg$reportedPos = s3;
                                                    s4 = peg$c61(s8);
                                                    s3 = s4;
                                                  } else {
                                                    peg$currPos = s3;
                                                    s3 = peg$c1;
                                                  }
                                                } else {
                                                  peg$currPos = s3;
                                                  s3 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c1;
                                            }
                                          } else {
                                            peg$currPos = s3;
                                            s3 = peg$c1;
                                          }
                                          if (s3 === peg$FAILED) {
                                            s3 = peg$currPos;
                                            if (peg$c59.test(input.charAt(peg$currPos))) {
                                              s4 = input.charAt(peg$currPos);
                                              peg$currPos++;
                                            } else {
                                              s4 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c60); }
                                            }
                                            if (s4 !== peg$FAILED) {
                                              if (peg$c42.test(input.charAt(peg$currPos))) {
                                                s5 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                              } else {
                                                s5 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c43); }
                                              }
                                              if (s5 !== peg$FAILED) {
                                                if (peg$c27.test(input.charAt(peg$currPos))) {
                                                  s6 = input.charAt(peg$currPos);
                                                  peg$currPos++;
                                                } else {
                                                  s6 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                }
                                                if (s6 !== peg$FAILED) {
                                                  s7 = [];
                                                  s8 = peg$parsewhitespace();
                                                  while (s8 !== peg$FAILED) {
                                                    s7.push(s8);
                                                    s8 = peg$parsewhitespace();
                                                  }
                                                  if (s7 !== peg$FAILED) {
                                                    s8 = peg$parseWord();
                                                    if (s8 !== peg$FAILED) {
                                                      peg$reportedPos = s3;
                                                      s4 = peg$c62(s8);
                                                      s3 = s4;
                                                    } else {
                                                      peg$currPos = s3;
                                                      s3 = peg$c1;
                                                    }
                                                  } else {
                                                    peg$currPos = s3;
                                                    s3 = peg$c1;
                                                  }
                                                } else {
                                                  peg$currPos = s3;
                                                  s3 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c1;
                                              }
                                            } else {
                                              peg$currPos = s3;
                                              s3 = peg$c1;
                                            }
                                            if (s3 === peg$FAILED) {
                                              s3 = peg$currPos;
                                              s4 = peg$parsebyteRegister();
                                              if (s4 !== peg$FAILED) {
                                                if (peg$c27.test(input.charAt(peg$currPos))) {
                                                  s5 = input.charAt(peg$currPos);
                                                  peg$currPos++;
                                                } else {
                                                  s5 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                }
                                                if (s5 !== peg$FAILED) {
                                                  s6 = [];
                                                  s7 = peg$parsewhitespace();
                                                  while (s7 !== peg$FAILED) {
                                                    s6.push(s7);
                                                    s7 = peg$parsewhitespace();
                                                  }
                                                  if (s6 !== peg$FAILED) {
                                                    s7 = peg$parseregisterOrMemoryByte();
                                                    if (s7 !== peg$FAILED) {
                                                      peg$reportedPos = s3;
                                                      s4 = peg$c63(s4, s7);
                                                      s3 = s4;
                                                    } else {
                                                      peg$currPos = s3;
                                                      s3 = peg$c1;
                                                    }
                                                  } else {
                                                    peg$currPos = s3;
                                                    s3 = peg$c1;
                                                  }
                                                } else {
                                                  peg$currPos = s3;
                                                  s3 = peg$c1;
                                                }
                                              } else {
                                                peg$currPos = s3;
                                                s3 = peg$c1;
                                              }
                                              if (s3 === peg$FAILED) {
                                                s3 = peg$currPos;
                                                s4 = peg$parseregisterWord();
                                                if (s4 !== peg$FAILED) {
                                                  if (peg$c27.test(input.charAt(peg$currPos))) {
                                                    s5 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                  } else {
                                                    s5 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                  }
                                                  if (s5 !== peg$FAILED) {
                                                    s6 = [];
                                                    s7 = peg$parsewhitespace();
                                                    while (s7 !== peg$FAILED) {
                                                      s6.push(s7);
                                                      s7 = peg$parsewhitespace();
                                                    }
                                                    if (s6 !== peg$FAILED) {
                                                      s7 = peg$parseregisterOrMemoryWord();
                                                      if (s7 !== peg$FAILED) {
                                                        peg$reportedPos = s3;
                                                        s4 = peg$c64(s4, s7);
                                                        s3 = s4;
                                                      } else {
                                                        peg$currPos = s3;
                                                        s3 = peg$c1;
                                                      }
                                                    } else {
                                                      peg$currPos = s3;
                                                      s3 = peg$c1;
                                                    }
                                                  } else {
                                                    peg$currPos = s3;
                                                    s3 = peg$c1;
                                                  }
                                                } else {
                                                  peg$currPos = s3;
                                                  s3 = peg$c1;
                                                }
                                                if (s3 === peg$FAILED) {
                                                  s3 = peg$currPos;
                                                  s4 = peg$parsesegmentRegister();
                                                  if (s4 !== peg$FAILED) {
                                                    if (peg$c27.test(input.charAt(peg$currPos))) {
                                                      s5 = input.charAt(peg$currPos);
                                                      peg$currPos++;
                                                    } else {
                                                      s5 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                    }
                                                    if (s5 !== peg$FAILED) {
                                                      s6 = [];
                                                      s7 = peg$parsewhitespace();
                                                      while (s7 !== peg$FAILED) {
                                                        s6.push(s7);
                                                        s7 = peg$parsewhitespace();
                                                      }
                                                      if (s6 !== peg$FAILED) {
                                                        s7 = peg$parseregisterOrMemoryWord();
                                                        if (s7 !== peg$FAILED) {
                                                          peg$reportedPos = s3;
                                                          s4 = peg$c65(s4, s7);
                                                          s3 = s4;
                                                        } else {
                                                          peg$currPos = s3;
                                                          s3 = peg$c1;
                                                        }
                                                      } else {
                                                        peg$currPos = s3;
                                                        s3 = peg$c1;
                                                      }
                                                    } else {
                                                      peg$currPos = s3;
                                                      s3 = peg$c1;
                                                    }
                                                  } else {
                                                    peg$currPos = s3;
                                                    s3 = peg$c1;
                                                  }
                                                  if (s3 === peg$FAILED) {
                                                    s3 = peg$currPos;
                                                    s4 = peg$parseregisterOrMemoryWord();
                                                    if (s4 !== peg$FAILED) {
                                                      if (peg$c27.test(input.charAt(peg$currPos))) {
                                                        s5 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                      } else {
                                                        s5 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                      }
                                                      if (s5 !== peg$FAILED) {
                                                        s6 = [];
                                                        s7 = peg$parsewhitespace();
                                                        while (s7 !== peg$FAILED) {
                                                          s6.push(s7);
                                                          s7 = peg$parsewhitespace();
                                                        }
                                                        if (s6 !== peg$FAILED) {
                                                          if (peg$c23.test(input.charAt(peg$currPos))) {
                                                            s7 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                          } else {
                                                            s7 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                                          }
                                                          if (s7 !== peg$FAILED) {
                                                            if (peg$c34.test(input.charAt(peg$currPos))) {
                                                              s8 = input.charAt(peg$currPos);
                                                              peg$currPos++;
                                                            } else {
                                                              s8 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c35); }
                                                            }
                                                            if (s8 !== peg$FAILED) {
                                                              peg$reportedPos = s3;
                                                              s4 = peg$c66(s4, s7);
                                                              s3 = s4;
                                                            } else {
                                                              peg$currPos = s3;
                                                              s3 = peg$c1;
                                                            }
                                                          } else {
                                                            peg$currPos = s3;
                                                            s3 = peg$c1;
                                                          }
                                                        } else {
                                                          peg$currPos = s3;
                                                          s3 = peg$c1;
                                                        }
                                                      } else {
                                                        peg$currPos = s3;
                                                        s3 = peg$c1;
                                                      }
                                                    } else {
                                                      peg$currPos = s3;
                                                      s3 = peg$c1;
                                                    }
                                                    if (s3 === peg$FAILED) {
                                                      s3 = peg$currPos;
                                                      s4 = peg$parseregisterOrMemoryByte();
                                                      if (s4 !== peg$FAILED) {
                                                        if (peg$c27.test(input.charAt(peg$currPos))) {
                                                          s5 = input.charAt(peg$currPos);
                                                          peg$currPos++;
                                                        } else {
                                                          s5 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                        }
                                                        if (s5 !== peg$FAILED) {
                                                          s6 = [];
                                                          s7 = peg$parsewhitespace();
                                                          while (s7 !== peg$FAILED) {
                                                            s6.push(s7);
                                                            s7 = peg$parsewhitespace();
                                                          }
                                                          if (s6 !== peg$FAILED) {
                                                            if (peg$c23.test(input.charAt(peg$currPos))) {
                                                              s7 = input.charAt(peg$currPos);
                                                              peg$currPos++;
                                                            } else {
                                                              s7 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c24); }
                                                            }
                                                            if (s7 !== peg$FAILED) {
                                                              if (peg$c30.test(input.charAt(peg$currPos))) {
                                                                s8 = input.charAt(peg$currPos);
                                                                peg$currPos++;
                                                              } else {
                                                                s8 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c31); }
                                                              }
                                                              if (s8 !== peg$FAILED) {
                                                                peg$reportedPos = s3;
                                                                s4 = peg$c67(s4, s7);
                                                                s3 = s4;
                                                              } else {
                                                                peg$currPos = s3;
                                                                s3 = peg$c1;
                                                              }
                                                            } else {
                                                              peg$currPos = s3;
                                                              s3 = peg$c1;
                                                            }
                                                          } else {
                                                            peg$currPos = s3;
                                                            s3 = peg$c1;
                                                          }
                                                        } else {
                                                          peg$currPos = s3;
                                                          s3 = peg$c1;
                                                        }
                                                      } else {
                                                        peg$currPos = s3;
                                                        s3 = peg$c1;
                                                      }
                                                      if (s3 === peg$FAILED) {
                                                        s3 = peg$currPos;
                                                        s4 = peg$parseregisterOrMemoryByte();
                                                        if (s4 !== peg$FAILED) {
                                                          if (peg$c27.test(input.charAt(peg$currPos))) {
                                                            s5 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                          } else {
                                                            s5 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                          }
                                                          if (s5 !== peg$FAILED) {
                                                            s6 = [];
                                                            s7 = peg$parsewhitespace();
                                                            while (s7 !== peg$FAILED) {
                                                              s6.push(s7);
                                                              s7 = peg$parsewhitespace();
                                                            }
                                                            if (s6 !== peg$FAILED) {
                                                              s7 = peg$parseByte();
                                                              if (s7 !== peg$FAILED) {
                                                                peg$reportedPos = s3;
                                                                s4 = peg$c68(s4, s7);
                                                                s3 = s4;
                                                              } else {
                                                                peg$currPos = s3;
                                                                s3 = peg$c1;
                                                              }
                                                            } else {
                                                              peg$currPos = s3;
                                                              s3 = peg$c1;
                                                            }
                                                          } else {
                                                            peg$currPos = s3;
                                                            s3 = peg$c1;
                                                          }
                                                        } else {
                                                          peg$currPos = s3;
                                                          s3 = peg$c1;
                                                        }
                                                        if (s3 === peg$FAILED) {
                                                          s3 = peg$currPos;
                                                          s4 = peg$parseregisterOrMemoryByte();
                                                          if (s4 !== peg$FAILED) {
                                                            if (peg$c27.test(input.charAt(peg$currPos))) {
                                                              s5 = input.charAt(peg$currPos);
                                                              peg$currPos++;
                                                            } else {
                                                              s5 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                            }
                                                            if (s5 !== peg$FAILED) {
                                                              s6 = [];
                                                              s7 = peg$parsewhitespace();
                                                              while (s7 !== peg$FAILED) {
                                                                s6.push(s7);
                                                                s7 = peg$parsewhitespace();
                                                              }
                                                              if (s6 !== peg$FAILED) {
                                                                s7 = peg$parsebyteRegister();
                                                                if (s7 !== peg$FAILED) {
                                                                  peg$reportedPos = s3;
                                                                  s4 = peg$c69(s4, s7);
                                                                  s3 = s4;
                                                                } else {
                                                                  peg$currPos = s3;
                                                                  s3 = peg$c1;
                                                                }
                                                              } else {
                                                                peg$currPos = s3;
                                                                s3 = peg$c1;
                                                              }
                                                            } else {
                                                              peg$currPos = s3;
                                                              s3 = peg$c1;
                                                            }
                                                          } else {
                                                            peg$currPos = s3;
                                                            s3 = peg$c1;
                                                          }
                                                          if (s3 === peg$FAILED) {
                                                            s3 = peg$currPos;
                                                            s4 = peg$parseregisterOrMemoryWord();
                                                            if (s4 !== peg$FAILED) {
                                                              if (peg$c27.test(input.charAt(peg$currPos))) {
                                                                s5 = input.charAt(peg$currPos);
                                                                peg$currPos++;
                                                              } else {
                                                                s5 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                              }
                                                              if (s5 !== peg$FAILED) {
                                                                s6 = [];
                                                                s7 = peg$parsewhitespace();
                                                                while (s7 !== peg$FAILED) {
                                                                  s6.push(s7);
                                                                  s7 = peg$parsewhitespace();
                                                                }
                                                                if (s6 !== peg$FAILED) {
                                                                  s7 = peg$parseWord();
                                                                  if (s7 !== peg$FAILED) {
                                                                    peg$reportedPos = s3;
                                                                    s4 = peg$c70(s4, s7);
                                                                    s3 = s4;
                                                                  } else {
                                                                    peg$currPos = s3;
                                                                    s3 = peg$c1;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s3;
                                                                  s3 = peg$c1;
                                                                }
                                                              } else {
                                                                peg$currPos = s3;
                                                                s3 = peg$c1;
                                                              }
                                                            } else {
                                                              peg$currPos = s3;
                                                              s3 = peg$c1;
                                                            }
                                                            if (s3 === peg$FAILED) {
                                                              s3 = peg$currPos;
                                                              s4 = peg$parseregisterOrMemoryWord();
                                                              if (s4 !== peg$FAILED) {
                                                                if (peg$c27.test(input.charAt(peg$currPos))) {
                                                                  s5 = input.charAt(peg$currPos);
                                                                  peg$currPos++;
                                                                } else {
                                                                  s5 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                                }
                                                                if (s5 !== peg$FAILED) {
                                                                  s6 = [];
                                                                  s7 = peg$parsewhitespace();
                                                                  while (s7 !== peg$FAILED) {
                                                                    s6.push(s7);
                                                                    s7 = peg$parsewhitespace();
                                                                  }
                                                                  if (s6 !== peg$FAILED) {
                                                                    s7 = peg$parseregisterWord();
                                                                    if (s7 !== peg$FAILED) {
                                                                      peg$reportedPos = s3;
                                                                      s4 = peg$c71(s4, s7);
                                                                      s3 = s4;
                                                                    } else {
                                                                      peg$currPos = s3;
                                                                      s3 = peg$c1;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s3;
                                                                    s3 = peg$c1;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s3;
                                                                  s3 = peg$c1;
                                                                }
                                                              } else {
                                                                peg$currPos = s3;
                                                                s3 = peg$c1;
                                                              }
                                                              if (s3 === peg$FAILED) {
                                                                s3 = peg$currPos;
                                                                s4 = peg$parseregisterOrMemoryWord();
                                                                if (s4 !== peg$FAILED) {
                                                                  if (peg$c27.test(input.charAt(peg$currPos))) {
                                                                    s5 = input.charAt(peg$currPos);
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s5 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c28); }
                                                                  }
                                                                  if (s5 !== peg$FAILED) {
                                                                    s6 = [];
                                                                    s7 = peg$parsewhitespace();
                                                                    while (s7 !== peg$FAILED) {
                                                                      s6.push(s7);
                                                                      s7 = peg$parsewhitespace();
                                                                    }
                                                                    if (s6 !== peg$FAILED) {
                                                                      s7 = peg$parsesegmentRegister();
                                                                      if (s7 !== peg$FAILED) {
                                                                        peg$reportedPos = s3;
                                                                        s4 = peg$c72(s4, s7);
                                                                        s3 = s4;
                                                                      } else {
                                                                        peg$currPos = s3;
                                                                        s3 = peg$c1;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s3;
                                                                      s3 = peg$c1;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s3;
                                                                    s3 = peg$c1;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s3;
                                                                  s3 = peg$c1;
                                                                }
                                                                if (s3 === peg$FAILED) {
                                                                  s3 = peg$currPos;
                                                                  s4 = [];
                                                                  if (peg$c73.test(input.charAt(peg$currPos))) {
                                                                    s5 = input.charAt(peg$currPos);
                                                                    peg$currPos++;
                                                                  } else {
                                                                    s5 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                                                  }
                                                                  if (s5 === peg$FAILED) {
                                                                    s5 = peg$parsewhitespace();
                                                                  }
                                                                  if (s5 !== peg$FAILED) {
                                                                    while (s5 !== peg$FAILED) {
                                                                      s4.push(s5);
                                                                      if (peg$c73.test(input.charAt(peg$currPos))) {
                                                                        s5 = input.charAt(peg$currPos);
                                                                        peg$currPos++;
                                                                      } else {
                                                                        s5 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c74); }
                                                                      }
                                                                      if (s5 === peg$FAILED) {
                                                                        s5 = peg$parsewhitespace();
                                                                      }
                                                                    }
                                                                  } else {
                                                                    s4 = peg$c1;
                                                                  }
                                                                  if (s4 !== peg$FAILED) {
                                                                    peg$reportedPos = s3;
                                                                    s4 = peg$c75(s4);
                                                                  }
                                                                  s3 = s4;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c76(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c78;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c80.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c80.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c81); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c82(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }

      return s0;
    }

    function peg$parse__() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parseeol();
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsewhitespace();
        if (s1 === peg$FAILED) {
          s1 = peg$parseeol();
        }
      }

      return s0;
    }

    function peg$parseeol() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c84;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c86) {
          s0 = peg$c86;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c88;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c89); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8232) {
              s0 = peg$c90;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c91); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 8233) {
                s0 = peg$c92;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c93); }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c95.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parsebyteRegister() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c98.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c100.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }

      return s0;
    }

    function peg$parsegeneralRegister() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c98.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c34.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c103); }
      }

      return s0;
    }

    function peg$parseindexRegister() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c104.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c106.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesegmentRegister() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c108.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c109); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c59.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSIorDIRegister() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c110.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBXorBPRegister() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (peg$c38.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c112.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c1;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c102(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseaddressRegister() {
      var s0;

      s0 = peg$parseSIorDIRegister();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBXorBPRegister();
      }

      return s0;
    }

    function peg$parseregisterWord() {
      var s0;

      s0 = peg$parsegeneralRegister();
      if (s0 === peg$FAILED) {
        s0 = peg$parseindexRegister();
      }

      return s0;
    }

    function peg$parseregisterOrMemoryWord() {
      var s0;

      s0 = peg$parsememoryAddress();
      if (s0 === peg$FAILED) {
        s0 = peg$parseregisterWord();
      }

      return s0;
    }

    function peg$parseregisterOrMemoryByte() {
      var s0;

      s0 = peg$parsememoryAddress();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebyteRegister();
      }

      return s0;
    }

    function peg$parsememoryAddress() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c114;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c115); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseaddressRegister();
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c116(s3);
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseWord();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c117(s3);
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseByte();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c117(s3);
            }
            s2 = s3;
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseEquation();
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c118(s3);
              }
              s2 = s3;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c119;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c121(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEquation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseEquPart();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseEquPart();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEquPart();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c122(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseEquPart() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseaddressRegister();
      if (s1 === peg$FAILED) {
        s1 = peg$parsenumLiteral();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c123.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c124); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c123.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c124); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c125(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parseByte() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenumLiteral();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c126(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseWord() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenumLiteral();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c127(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumLiteral() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsebinLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehexLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedecLiteral();
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }

      return s0;
    }

    function peg$parsedecLiteral() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c130.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c131); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c5;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsedigit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsedigit();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c132(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }

      return s0;
    }

    function peg$parsehexLiteral() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsehexForm1();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehexForm2();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c133); }
      }

      return s0;
    }

    function peg$parsehexForm1() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c134) {
        s1 = peg$c134;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c135); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsehexit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsehexit();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c136(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsehexForm2() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsehexit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsehexit();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 72) {
          s2 = peg$c137;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c138); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 104) {
            s2 = peg$c139;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c140); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c136(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }

      return s0;
    }

    function peg$parsebinLiteral() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsebinLiteral1();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebinLiteral2();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }

      return s0;
    }

    function peg$parsebinLiteral1() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c143) {
        s1 = peg$c143;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsebit();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsebit();
          }
        } else {
          s2 = peg$c1;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c145(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parsebinLiteral2() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsebit();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsebit();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 98) {
          s2 = peg$c146;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c147); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c145(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseidentifier() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseidentLetter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseidentLetter();
        }
      } else {
        s1 = peg$c1;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c149(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }

      return s0;
    }

    function peg$parseidentLetter() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c151.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }

      return s0;
    }

    function peg$parsedigit() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c154.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c155); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c153); }
      }

      return s0;
    }

    function peg$parsehexit() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c157.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }

      return s0;
    }

    function peg$parsebit() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c160.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c161); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c159); }
      }

      return s0;
    }


        var symbolTable = {};
        var ilc = 0;
        var opcodeTable = {
            'MOV AH,immediateByte':  {code: 0xB4, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV AL,immediateByte':  {code: 0xB0, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV BL,immediateByte':  {code: 0xB3, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV CH,immediateByte':  {code: 0xB5, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV CL,immediateByte':  {code: 0xB1, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV BH,immediateByte':  {code: 0xB7, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV DH,immediateByte':  {code: 0xB6, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV DL,immediateByte':  {code: 0xB2, ads:['i0'], dataType:BYTE, size:[2]},
            'MOV BP,immediateWord':  {code: 0xBD, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV BX,immediateWord':  {code: 0xBB, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV CX,immediateWord':  {code: 0xB9, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV DI,immediateWord':  {code: 0xBF, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV DX,immediateWord':  {code: 0xBA, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV SI,immediateWord':  {code: 0xBE, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV SP,immediateWord':  {code: 0xBC, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV AX,immediateWord':  {code: 0xB8, ads:['i0', 'i1'], dataType:WORD, size:[3]},
            'MOV AL,registerOrMemoryByte': {code: 0xA0, ads:['d0', 'd1'], dataType:BYTE, size:[3]},
            'MOV AX,registerOrMemoryWord': {code: 0xA1, ads:['d0', 'd1'], dataType:WORD, size:[3]},
            'MOV registerOrMemoryByte,AL': {code: 0xA2, ads:['d0', 'd1'], dataType:BYTE, size:[3]},
            'MOV registerOrMemoryWord,AX': {code: 0xA3, ads:['d0', 'd1'], dataType:WORD, size:[3]},
            'MOV registerOrMemoryWord,segmentRegister': {code: 0x8C, ads:['mr', 'd0', 'd1'], dataType:WORD, size:[2,4]},
            'MOV segmentRegister,registerOrMemoryWord': {code: 0x8E, ads:['mr', 'd0', 'd1'], dataType:WORD, size:[2,4]},
            'MOV registerByte,registerOrMemoryByte': {code: 0x8A, ads:['mr', 'd0', 'd1'], dataType:BYTE, size:[2,4]},
            'MOV registerOrMemoryByte,registerByte': {code: 0x88, ads:['mr', 'd0', 'd1'], dataType:BYTE, size:[2,4]},
            'MOV registerOrMemoryWord,registerWord': {code: 0x89, ads:['mr', 'd0', 'd1'], dataType:WORD, size:[2,4]},
            'MOV registerWord,registerOrMemoryWord': {code: 0x8B, ads:['mr', 'd0', 'd1'], dataType:WORD, size:[2,4]},
            'MOV registerOrMemoryByte,immediateByte': {code: 0xC6, ads:['mr', 'd0', 'd1', 'i0'], dataType:BYTE, size:[3,5]},
            'MOV registerOrMemoryWord,immediateWord': {code: 0xC7, ads:['mr', 'd0', 'd1', 'i0', 'i1'], dataType:WORD, size:[4,6]}
        }

        var BYTE = 0
            , WORD = 1
            , IMV = 2
            , REG = 3

            , AL = {type:REG, data:'AL'}
            , AH = {type:REG, data:'AH'}

        var twosComplement = function (d8) {
            return (0xFF + d8 + 1);
        };


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
